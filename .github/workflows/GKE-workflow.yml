name: mlflow-build-deploy-GKE

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  #  paths-ignore:
  #    - '.github/**'
  pull_request:
    branches: [ "main" ]
  workflow_call:
    outputs:
      commit: 
        description: "Short Commit Id"
        value: ${{ jobs.build-and-push.outputs.commit }}

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  MLFLOW_DOCKER_IMAGE: ghcr.io/${{ github.repository }}
  GKE_CLUSTER_NAME: operations-dev-gkedemo1
  GKE_LOCATION: europe-north1
# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  mlflow-build:
    name: Build and push docker image
    # The type of runner that the job will run on
    
    runs-on: ubuntu-latest
    outputs:
      commit: ${{ steps.push-image.outputs.commit }}
    

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3

      - name: docker version and build
        run: |
          docker -v
          docker build . -f Dockerfile -t $MLFLOW_DOCKER_IMAGE
          docker images -a
      
      - if: github.event_name != 'pull_request'
        name: docker login and push
        id: push-image
        run: |
          echo "${{ github.token }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          VERSION=${GITHUB_SHA::8}
          echo MLFLOW_DOCKER_IMAGE=$MLFLOW_DOCKER_IMAGE
          echo VERSION=$VERSION
          docker tag $MLFLOW_DOCKER_IMAGE $MLFLOW_DOCKER_IMAGE:$VERSION 
          docker push $MLFLOW_DOCKER_IMAGE:$VERSION
          docker push $MLFLOW_DOCKER_IMAGE
          echo "::set-output name=commit::$VERSION"

      # - if: github.event_name != 'pull_request'    
      #   name: Publish Deployment Artifacts
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: deployment-artifacts
      #     path: |
      #       deployment





  mlflow-deploy-gke:
    env:
        
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      
  
    needs: mlflow-build
    permissions:
      id-token: write # This is required for Github Action to generate an id-token from Github OIDC
    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      max-parallel: 1
      matrix:
        environment: [Dev]
        region: [eu-central-1]
    environment:
      name: ${{ matrix.environment }}

    steps:
      # - name: Download Deployment Artifacts
      #   uses: actions/download-artifact@v3
      #   with:
      #     name: deployment-artifacts
      - uses: actions/checkout@v3    
      # Replace the docker image tag in deployment spec.
      - name: Substitute Values In Deployment Files
        uses: cschleiden/replace-tokens@v1
        with:
          tokenPrefix: '${'
          tokenSuffix: '}'
          files: '["manifests/GKE/mlflow.yaml"]'
        env:
          COMMIT: ${{ needs.mlflow-build.outputs.commit }}
          
    

    # Setup gcloud CLI
      - uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GKE_PROJECT }}

  
    # Get the GKE credentials so we can deploy to the cluster
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}  
      
      - id: get-credentials 
        uses: google-github-actions/get-gke-credentials@main
        with:
          cluster_name: $GKE_CLUSTER_NAME
          location: europe-north1
          project_id: ${{ secrets.GKE_PROJECT }}
      
      
      - name: Create namespace
        run: |
          kubectl apply -f manifests/namespace.yaml


      - name: Create secret mlflow-secret
        shell: bash
        continue-on-error: true
        run: |
        
          kubectl create configmap  default-artifact-root --from-literal=DEFAULT_ARTIFACT_ROOT=${{ secrets.DEFAULT_ARTIFACT_ROOT }} -n mlflow --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret generic mlflow-secret --from-literal=DB_PASSWORD=${{ secrets.DB_PASSWORD }} -n mlflow --dry-run=client -o yaml | kubectl apply -f -
          kubectl create secret  docker-registry ghcr-cred --docker-username=${{ secrets.DOCKER_USER }} --docker-password=${{ secrets.DOCKER_PASSWORD }} --docker-email=${{ secrets.DOCKER_EMAIL}} -n mlflow --dry-run=client -o yaml | kubectl apply -f -
        
        
      # Deploy newly built changes to EKS cluster.
      - name: Deploy To GKE Cluster
        shell: bash
        run: |
          kubectl apply  -f manifests/GKE/mlflow-cm.yaml
          kubectl apply  -f manifests/GKE/mlflow-storageclass.yaml
          kubectl apply  -f manifests/GKE/mlflow-postgresql-data.yaml
          kubectl apply  -f manifests/GKE/mlflow-postgresql.yaml
          kubectl apply  -f manifests/GKE/mlflow-postgresql-service.yaml
          kubectl apply  -f manifests/GKE/mlflow.yaml

      - name: Deploy Loadbalancer
        shell: bash
        run: |
         kubectl apply  -f ingress/mlflow-lb.yaml
          